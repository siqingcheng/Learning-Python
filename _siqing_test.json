{"paragraphs":[{"text":"%md\n 1.    IP Ranges provided by program team and are known test accounts\n 2.    Devices with Average TTFF/Day  < 1 second over any of the past 7 days --only based on IP\n 3.    Devices with >=100 Sessions/Day over any of the past 7 days           --only based on IP\n 4.    Devices that hit Test Stacks over the past 7 days – Based on Hostname values that start with “tvxxre-ci” or “tvxxre-yy”\n 5.    Devices associated with Account Numbers that start with “8069”, “815510018\" or “849910014”","dateUpdated":"2017-11-17T16:24:10+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510769074509_-639962493","id":"20171115-180434_1529959156","result":{"code":"SUCCESS","type":"HTML","msg":"<ol>\n<li>IP Ranges provided by program team and are known test accounts</li>\n<li>Devices with Average TTFF/Day  &lt; 1 second over any of the past 7 days</li>\n<li>Devices with >=100 Sessions/Day over any of the past 7 days</li>\n<li>Devices that hit Test Stacks over the past 7 days – Based on Hostname values that start with “tvxxre-ci” or “tvxxre-yy”</li>\n<li>Devices associated with Account Numbers that start with “8069”, “815510018&rdquo; or “849910014”</li>\n</ol>\n"},"dateCreated":"2017-11-15T06:04:34+0000","dateStarted":"2017-11-15T08:16:11+0000","dateFinished":"2017-11-15T08:16:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:120"},{"text":"%spark\nimport com.databricks.spark.avro._\nval avro_data = spark.read.avro(\"s3n://cloudbridge-staging/data/deap/sdp.watermark.xre.comcast.TuneEvent/2017/08/15/*/*/*.avro\")","dateUpdated":"2017-11-15T20:47:49+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1509820301214_-1081755358","id":"20171104-183141_191058472","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport com.databricks.spark.avro._\n\navro_data: org.apache.spark.sql.DataFrame = [header: struct<timestamp: struct<value: bigint>, uuid: struct<value: string> ... 2 more fields>, device: struct<receiverId: string, deviceId: string ... 10 more fields> ... 11 more fields]\n"},"dateCreated":"2017-11-04T06:31:41+0000","dateStarted":"2017-11-15T20:47:50+0000","dateFinished":"2017-11-15T20:52:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:121"},{"text":"%spark\navro_data.printSchema()","dateUpdated":"2017-11-15T20:52:55+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1509820288542_346432560","id":"20171104-183128_607447259","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- header: struct (nullable = true)\n |    |-- timestamp: struct (nullable = true)\n |    |    |-- value: long (nullable = true)\n |    |-- uuid: struct (nullable = true)\n |    |    |-- value: string (nullable = true)\n |    |-- hostname: string (nullable = true)\n |    |-- money: struct (nullable = true)\n |    |    |-- traceId: struct (nullable = true)\n |    |    |    |-- value: string (nullable = true)\n |    |    |-- spanId: long (nullable = true)\n |    |    |-- parentSpanId: long (nullable = true)\n |    |    |-- spanName: string (nullable = true)\n |    |    |-- appName: string (nullable = true)\n |    |    |-- startTime: long (nullable = true)\n |    |    |-- spanDuration: long (nullable = true)\n |    |    |-- spanSuccess: boolean (nullable = true)\n |    |    |-- host: string (nullable = true)\n |-- device: struct (nullable = true)\n |    |-- receiverId: string (nullable = true)\n |    |-- deviceId: string (nullable = true)\n |    |-- deviceSourceId: string (nullable = true)\n |    |-- account: string (nullable = true)\n |    |-- accountSourceId: string (nullable = true)\n |    |-- macAddress: string (nullable = true)\n |    |-- ecmMacAddress: string (nullable = true)\n |    |-- firmwareVersion: string (nullable = true)\n |    |-- deviceType: string (nullable = true)\n |    |-- partner: string (nullable = true)\n |    |-- ipAddress: string (nullable = true)\n |    |-- utcOffset: integer (nullable = true)\n |-- asset: struct (nullable = true)\n |    |-- programId: string (nullable = true)\n |    |-- rawUrl: string (nullable = true)\n |    |-- mediaGuid: string (nullable = true)\n |    |-- providerId: string (nullable = true)\n |    |-- assetId: string (nullable = true)\n |    |-- externalAssetId: string (nullable = true)\n |    |-- channelId: string (nullable = true)\n |    |-- partnerSourceId: string (nullable = true)\n |    |-- listingId: string (nullable = true)\n |    |-- companyName: string (nullable = true)\n |-- utcOffset: integer (nullable = true)\n |-- requestTimestamp: long (nullable = true)\n |-- responseTimestamp: long (nullable = true)\n |-- assetClass: string (nullable = true)\n |-- deliveryMedium: string (nullable = true)\n |-- tuneStatus: string (nullable = true)\n |-- statusMessage: string (nullable = true)\n |-- latency: integer (nullable = true)\n |-- isStartup: boolean (nullable = true)\n |-- notifyType: string (nullable = true)\n\n"},"dateCreated":"2017-11-04T06:31:28+0000","dateStarted":"2017-11-15T20:52:55+0000","dateFinished":"2017-11-15T20:52:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:122"},{"text":"%spark\navro_data.toDF().registerTempTable(\"xre_tune\")\n\nspark.sql(\"select count(*) from xre_tune where deliveryMedium == 'IP' and  assetClass=='LINEAR_TV' \").show()\n\nval xre_tune_df = spark.sql(\"select * from xre_tune limit 5\")\nxre_tune_df.show()\n","dateUpdated":"2017-11-15T08:30:02+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510764633730_-1116239996","id":"20171115-165033_319010934","result":{"code":"SUCCESS","type":"TEXT","msg":"\nwarning: there was one deprecation warning; re-run with -deprecation for details\n+--------+\n|count(1)|\n+--------+\n|  257944|\n+--------+\n\n\nxre_tune_df: org.apache.spark.sql.DataFrame = [header: struct<timestamp: struct<value: bigint>, uuid: struct<value: string> ... 2 more fields>, device: struct<receiverId: string, deviceId: string ... 10 more fields> ... 11 more fields]\n+--------------------+--------------------+--------------------+---------+----------------+-----------------+----------+--------------+-------------+-------------+-------+---------+----------+\n|              header|              device|               asset|utcOffset|requestTimestamp|responseTimestamp|assetClass|deliveryMedium|   tuneStatus|statusMessage|latency|isStartup|notifyType|\n+--------------------+--------------------+--------------------+---------+----------------+-----------------+----------+--------------+-------------+-------------+-------+---------+----------+\n|[[1502782480646],...|[P0129763482,2015...|[8512608118664092...|       -4|   1502782413488|    1502782415100| LINEAR_TV|           QAM|      SUCCESS|         null|   1612|    false|      null|\n|[[1502782480646],...|[P0112780564,8630...|[8894964261081426...|       -4|   1502782404376|    1502782415163| LINEAR_TV|           QAM|LATE_RESPONSE|         null|  10787|     true|      null|\n|[[1502782480646],...|[be120fb9-4c4c-4e...|[5874193941122887...|       -4|   1502782411309|    1502782414682| LINEAR_TV|           QAM|      SUCCESS|         null|   3373|     true|      null|\n|[[1502782480647],...|[b4be2e90-8205-4d...|[6676832168239186...|       -4|   1502782406693|    1502782410844| LINEAR_TV|           QAM|      SUCCESS|         null|   4151|     true|      null|\n|[[1502782480648],...|[b482b976-632d-4c...|[6436624357866654...|       -4|   1502782406717|    1502782410692| LINEAR_TV|           QAM|      SUCCESS|         null|   3975|     true|      null|\n+--------------------+--------------------+--------------------+---------+----------------+-----------------+----------+--------------+-------------+-------------+-------+---------+----------+\n\n"},"dateCreated":"2017-11-15T04:50:33+0000","dateStarted":"2017-11-15T05:02:12+0000","dateFinished":"2017-11-15T05:12:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:123"},{"text":"%spark\navro_data.toDF().registerTempTable(\"xre_tune\")\nval xre_tune = spark.sql(\"select * from xre_tune where deliveryMedium == 'IP' and  assetClass=='LINEAR_TV' \")\nxre_tune.write.save(\"dataframe_XRE_tune_8_15\")\n","dateUpdated":"2017-11-15T22:00:36+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510777675170_-1608229114","id":"20171115-202755_171053773","result":"org.apache.zeppelin.interpreter.InterpreterException: org.apache.thrift.transport.TTransportException: java.net.ConnectException: Connection refused (Connection refused)","dateCreated":"2017-11-15T08:27:55+0000","dateStarted":"2017-11-15T22:00:36+0000","dateFinished":"2017-11-15T22:00:36+0000","status":"ERROR","errorMessage":"java.net.ConnectException: Connection refused (Connection refused)\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:182)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:189)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:248)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:279)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:176)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:328)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:124"},{"text":"%spark\n\nval read_xre_tune_8_15 = spark.sql(\"SELECT * FROM parquet.`dataframe_XREtune_8_15/*.parquet`\")\nread_xre_tune_8_15.registerTempTable(\"xre_tune_8_15\")\n\n","dateUpdated":"2017-11-15T21:09:02+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510775967290_1878949382","id":"20171115-195927_286347928","result":"org.apache.zeppelin.interpreter.InterpreterException: org.apache.thrift.transport.TTransportException: java.net.ConnectException: Connection refused (Connection refused)","dateCreated":"2017-11-15T07:59:27+0000","dateStarted":"2017-11-15T21:09:03+0000","dateFinished":"2017-11-15T21:09:03+0000","status":"ERROR","errorMessage":"java.net.ConnectException: Connection refused (Connection refused)\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:182)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:189)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:248)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:279)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:176)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:328)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:125"},{"text":"%spark\nval VCPE_Whitelist = sc.textFile(\"/user/zeppelin/VCPE_Whitelist_Account_IDs.txt\")\n\ncase class Whitelist_Acc(XBO_Account : String, Whitelist_Category : String)\n\nval header_whitelist = VCPE_Whitelist.first()// #extract header\n\nval VCPE_Whitelist_Accounts = VCPE_Whitelist.filter(row => row != header_whitelist).map(s=>s.split(\",\")).map(\n    s=>Whitelist_Acc(s(0).replaceAll(\"\\\"\", \"\"),\n            s(1).replaceAll(\"\\\"\", \"\")\n        )\n    )\n\nVCPE_Whitelist_Accounts.toDF().registerTempTable(\"VCPE_Whitelist_Accounts\")\nprintln(\"done\")\n\nspark.sql(\"select count(*) from VCPE_Whitelist_Accounts \").show()   //444 counts\nspark.sql(\"select distinct Whitelist_Category  from VCPE_Whitelist_Accounts\").show()\n","dateUpdated":"2017-11-15T06:21:27+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510768347892_709129138","id":"20171115-175227_1930087198","result":{"code":"SUCCESS","type":"TEXT","msg":"\nVCPE_Whitelist: org.apache.spark.rdd.RDD[String] = /user/zeppelin/VCPE_Whitelist_Account_IDs.txt MapPartitionsRDD[263] at textFile at <console>:31\n\ndefined class Whitelist_Acc\n\nheader_whitelist: String = avannah_CustAndTech_20170605_1-2\n\nVCPE_Whitelist_Accounts: org.apache.spark.rdd.RDD[Whitelist_Acc] = MapPartitionsRDD[266] at map at <console>:37\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\ndone\n+--------+\n|count(1)|\n+--------+\n|     444|\n+--------+\n\n+--------------------+\n|  Whitelist_Category|\n+--------------------+\n|Employee_IP_Trial...|\n|  Lemeridien Devices|\n|Employee_IP_Trial...|\n|Gram_Savannah_Cus...|\n|Employee_IP_Trial...|\n+--------------------+\n\n"},"dateCreated":"2017-11-15T05:52:27+0000","dateStarted":"2017-11-15T06:21:27+0000","dateFinished":"2017-11-15T06:21:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:126"},{"text":"%spark\n\nval xre_tune_sample =spark.sql(\"select * from xre_tune where assetClass='LINEAR_TV'and  deliveryMedium == 'IP' and responseTimestamp='1502782413488'  limit 5 \")\nxre_tune_sample.show()\n\n\n","dateUpdated":"2017-11-15T07:41:26+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510767495664_-802775864","id":"20171115-173815_1036488624","result":{"code":"SUCCESS","type":"TEXT","msg":"\nxre_tune_sample: org.apache.spark.sql.DataFrame = [header: struct<timestamp: struct<value: bigint>, uuid: struct<value: string> ... 2 more fields>, device: struct<receiverId: string, deviceId: string ... 10 more fields> ... 11 more fields]\n+------+------+-----+---------+----------------+-----------------+----------+--------------+----------+-------------+-------+---------+----------+\n|header|device|asset|utcOffset|requestTimestamp|responseTimestamp|assetClass|deliveryMedium|tuneStatus|statusMessage|latency|isStartup|notifyType|\n+------+------+-----+---------+----------------+-----------------+----------+--------------+----------+-------------+-------+---------+----------+\n+------+------+-----+---------+----------------+-----------------+----------+--------------+----------+-------------+-------+---------+----------+\n\n"},"dateCreated":"2017-11-15T05:38:15+0000","dateStarted":"2017-11-15T07:41:26+0000","dateFinished":"2017-11-15T07:52:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:127"},{"text":"","dateUpdated":"2017-11-15T06:43:43+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510771413094_196606377","id":"20171115-184333_1268942010","dateCreated":"2017-11-15T06:43:33+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:128"},{"text":"","dateUpdated":"2017-11-15T06:43:43+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510771411435_-445539537","id":"20171115-184331_42291786","dateCreated":"2017-11-15T06:43:31+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:129"},{"text":"","dateUpdated":"2017-11-15T05:22:26+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1510766536302_-330439367","id":"20171115-172216_508166795","dateCreated":"2017-11-15T05:22:16+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:130"}],"name":"/siqing/test","id":"2CYVFVNVH","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}